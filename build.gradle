plugins {
   id 'groovy'
   id 'java-gradle-plugin'
   id "com.gradle.plugin-publish" version "0.10.1"
   id "pl.allegro.tech.build.axion-release" version "1.10.2"
   id "com.github.ben-manes.versions" version "0.27.0"
   id "org.dvaske.gradle.git-build-info" version "0.9"
   id "com.redpillanalytics.gradle-properties" version "0.1.4"
   id "com.github.breadmoirai.github-release" version "2.2.10"
   id 'org.unbroken-dome.test-sets' version '2.2.1'
   id 'com.adarshr.test-logger' version '2.0.0'
   id "com.avast.gradle.docker-compose" version "0.10.7"
}

scmVersion {

   tag {
      prefix = 'v'
      versionSeparator = ''
   }
   ignoreUncommittedChanges = true
}

//set Gradle version to SCM Version
allprojects {
   project.version = scmVersion.version
}

testSets {
   amazonTest
   googleTest
   kafkaTest
}

githubRelease {

   token = githubToken
   owner = 'RedPillAnalytics'
   repo = 'gradle-analytics'
   tagName = "v${version}"
   releaseAssets = fileTree(dir: buildDir, includes: ["**/*${version}*", "**/*${version}*.jar"]).toList()
}

dependencies {

   compile gradleApi()
   compile localGroovy()
   compile 'org.slf4j:slf4j-simple:+'

   compile "gradle.plugin.com.redpillanalytics:gradle-properties:0.1.5"

   compile 'com.google.code.gson:gson:+'
   compile 'org.eclipse.jgit:org.eclipse.jgit:+'

   compile 'com.amazonaws:aws-java-sdk-kinesis:+'
   compile 'com.amazonaws:aws-java-sdk-s3:+'

   compile 'com.google.cloud:google-cloud-pubsub:+'

   // Kafka
   compile 'org.apache.kafka:kafka-clients:+'
   compile 'org.apache.avro:avro:+'

   compile 'com.google.cloud:google-cloud-storage:+'

   // plugins
   compile "gradle.plugin.org.dvaske.gradle:git-build-info:+"
   compile "org.ajoberstar.grgit:grgit-gradle:+"

   testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'
   testCompile "org.testcontainers:spock:1.12.3"
   testCompile "org.testcontainers:kafka:1.12.3"
}

// Default artifact naming.
group = 'com.redpillanalytics'

repositories {
   jcenter()
   maven {
      url "https://plugins.gradle.org/m2/"
   }
   maven {
      url "http://packages.confluent.io/maven/"
   }
}

gradlePlugin {
   plugins {
      gradleAnalytics {
         id = 'com.redpillanalytics.gradle-analytics'
         implementationClass = 'com.redpillanalytics.analytics.AnalyticsPlugin'
      }
   }
}

pluginBundle {

   website = 'http://redpillanalytics.com/'
   vcsUrl = 'https://github.com/RedPillAnalytics/gradle-plugins/'

   plugins {
      gradleAnalytics {
         id = 'com.redpillanalytics.gradle-analytics'
         displayName = 'gradle-analytics'
         description = "A plugin for publishing data from Gradle builds to a variety of cloud and on-premises data sinks."
         tags = ['analytics', 'data-sinks']
         version = project.version
      }
   }
}

task cleanJunit(type: Delete) {
   delete getTestResultsDir()
}

task cleanLibs(type: Delete) {
   delete getLibsDir()
}

// Options for all tests
task runAllTests {
   description 'Run all defined tests.'
   group 'verification'
}

tasks.withType(Test) {
   tasks.runAllTests.dependsOn it
   failFast true
   ignoreFailures true
   testLogging.showStandardStreams true
   systemProperty 'projectDir', temporaryDir
}

def versionUrl = "${docsBucket}/${rootProject.name}/${version}"
task publishVersionDocs(type: Exec) {
   description 'Publish version Groovydocs to S3.'
   group 'publishing'
   executable 'aws'
   args 's3', 'sync', groovydoc.destinationDir.getPath(), "s3://${versionUrl}"
   doLast {
      logger.warn "\nVersion docs: https://s3.amazonaws.com/${versionUrl}/index.html"
   }
   dependsOn groovydoc
}

def latestUrl = "${docsBucket}/${rootProject.name}/latest"
task publishLatestDocs(type: Exec) {
   description 'Publish latest Groovydocs to S3.'
   group 'publishing'
   executable 'aws'
   args 's3', 'sync', groovydoc.destinationDir.getPath(), "s3://${latestUrl}"
   doLast {
      logger.warn "\nLatest docs: https://s3.amazonaws.com/${latestUrl}/index.html"
   }
   dependsOn groovydoc
}
// create a publish task
task publish {
   description 'Custom publish task.'
   group 'publishing'
   dependsOn tasks.publishPlugins, tasks.publishVersionDocs, tasks.publishLatestDocs, tasks.githubRelease
}

tasks.githubRelease.mustRunAfter tasks.publishPlugins

